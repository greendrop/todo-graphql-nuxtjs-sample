import { GraphQLClient } from 'graphql-request';
import { print } from 'graphql';
import gql from 'graphql-tag';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /**
   * Represents non-fractional signed whole numeric values. Since the value may
   * exceed the size of a 32-bit integer, it's encoded as a string.
   */
  BigInt: any;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};


/** Autogenerated input type of CreateTask */
export type CreateTaskInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  done: Scalars['Boolean'];
  title: Scalars['String'];
};

/** Autogenerated return type of CreateTask */
export type CreateTaskPayload = {
  __typename?: 'CreateTaskPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  task: Task;
};

/** Autogenerated input type of DeleteTask */
export type DeleteTaskInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteTask */
export type DeleteTaskPayload = {
  __typename?: 'DeleteTaskPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  task: Task;
};


export type Mutation = {
  __typename?: 'Mutation';
  createTask?: Maybe<CreateTaskPayload>;
  deleteTask?: Maybe<DeleteTaskPayload>;
  /** An example field added by the generator */
  testField: Scalars['String'];
  updateTask?: Maybe<UpdateTaskPayload>;
};


export type MutationCreateTaskArgs = {
  input: CreateTaskInput;
};


export type MutationDeleteTaskArgs = {
  input: DeleteTaskInput;
};


export type MutationUpdateTaskArgs = {
  input: UpdateTaskInput;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  task: Task;
  tasks: TaskConnection;
  /** An example field added by the generator */
  testField: Scalars['String'];
};


export type QueryTaskArgs = {
  id: Scalars['ID'];
};


export type QueryTasksArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export type Task = {
  __typename?: 'Task';
  createdAt: Scalars['ISO8601DateTime'];
  description?: Maybe<Scalars['String']>;
  done: Scalars['Boolean'];
  id: Scalars['ID'];
  title: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  user: User;
  userId: Scalars['BigInt'];
};

/** The connection type for Task. */
export type TaskConnection = {
  __typename?: 'TaskConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TaskEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Task>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type TaskEdge = {
  __typename?: 'TaskEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Task>;
};

/** Autogenerated input type of UpdateTask */
export type UpdateTaskInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  done?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  title?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateTask */
export type UpdateTaskPayload = {
  __typename?: 'UpdateTaskPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  task: Task;
};

export type User = {
  __typename?: 'User';
  createdAt: Scalars['ISO8601DateTime'];
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type CreateTaskMutationVariables = Exact<{
  title: Scalars['String'];
  description: Scalars['String'];
  done: Scalars['Boolean'];
}>;


export type CreateTaskMutation = (
  { __typename?: 'Mutation' }
  & { createTask?: Maybe<(
    { __typename?: 'CreateTaskPayload' }
    & { task: (
      { __typename?: 'Task' }
      & Pick<Task, 'id' | 'title' | 'description' | 'done' | 'createdAt' | 'updatedAt'>
    ) }
  )> }
);

export type DeleteTaskMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteTaskMutation = (
  { __typename?: 'Mutation' }
  & { deleteTask?: Maybe<(
    { __typename?: 'DeleteTaskPayload' }
    & { task: (
      { __typename?: 'Task' }
      & Pick<Task, 'id' | 'title' | 'description' | 'done' | 'createdAt' | 'updatedAt'>
    ) }
  )> }
);

export type UpdateTaskMutationVariables = Exact<{
  id: Scalars['ID'];
  title: Scalars['String'];
  description: Scalars['String'];
  done: Scalars['Boolean'];
}>;


export type UpdateTaskMutation = (
  { __typename?: 'Mutation' }
  & { updateTask?: Maybe<(
    { __typename?: 'UpdateTaskPayload' }
    & { task: (
      { __typename?: 'Task' }
      & Pick<Task, 'id' | 'title' | 'description' | 'done' | 'createdAt' | 'updatedAt'>
    ) }
  )> }
);

export type TaskQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type TaskQuery = (
  { __typename?: 'Query' }
  & { task: (
    { __typename?: 'Task' }
    & Pick<Task, 'id' | 'title' | 'description' | 'done' | 'createdAt' | 'updatedAt'>
  ) }
);

export type TasksQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
}>;


export type TasksQuery = (
  { __typename?: 'Query' }
  & { tasks: (
    { __typename?: 'TaskConnection' }
    & Pick<TaskConnection, 'totalCount'>
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'startCursor' | 'endCursor' | 'hasNextPage' | 'hasPreviousPage'>
    ), edges?: Maybe<Array<Maybe<(
      { __typename?: 'TaskEdge' }
      & { node?: Maybe<(
        { __typename?: 'Task' }
        & Pick<Task, 'id' | 'title' | 'description' | 'done' | 'createdAt' | 'updatedAt'>
      )> }
    )>>> }
  ) }
);


export const CreateTaskDocument = gql`
    mutation CreateTask($title: String!, $description: String!, $done: Boolean!) {
  createTask(input: {title: $title, description: $description, done: $done}) {
    task {
      id
      title
      description
      done
      createdAt
      updatedAt
    }
  }
}
    `;
export const DeleteTaskDocument = gql`
    mutation DeleteTask($id: ID!) {
  deleteTask(input: {id: $id}) {
    task {
      id
      title
      description
      done
      createdAt
      updatedAt
    }
  }
}
    `;
export const UpdateTaskDocument = gql`
    mutation UpdateTask($id: ID!, $title: String!, $description: String!, $done: Boolean!) {
  updateTask(
    input: {id: $id, title: $title, description: $description, done: $done}
  ) {
    task {
      id
      title
      description
      done
      createdAt
      updatedAt
    }
  }
}
    `;
export const TaskDocument = gql`
    query Task($id: ID!) {
  task(id: $id) {
    id
    title
    description
    done
    createdAt
    updatedAt
  }
}
    `;
export const TasksDocument = gql`
    query Tasks($after: String, $before: String, $first: Int, $last: Int) {
  tasks(after: $after, before: $before, first: $first, last: $last) {
    totalCount
    pageInfo {
      startCursor
      endCursor
      hasNextPage
      hasPreviousPage
    }
    edges {
      node {
        id
        title
        description
        done
        createdAt
        updatedAt
      }
    }
  }
}
    `;

export type SdkFunctionWrapper = <T>(action: () => Promise<T>) => Promise<T>;


const defaultWrapper: SdkFunctionWrapper = sdkFunction => sdkFunction();
export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {
    CreateTask(variables: CreateTaskMutationVariables, requestHeaders?: Headers): Promise<CreateTaskMutation> {
      return withWrapper(() => client.request<CreateTaskMutation>(print(CreateTaskDocument), variables, requestHeaders));
    },
    DeleteTask(variables: DeleteTaskMutationVariables, requestHeaders?: Headers): Promise<DeleteTaskMutation> {
      return withWrapper(() => client.request<DeleteTaskMutation>(print(DeleteTaskDocument), variables, requestHeaders));
    },
    UpdateTask(variables: UpdateTaskMutationVariables, requestHeaders?: Headers): Promise<UpdateTaskMutation> {
      return withWrapper(() => client.request<UpdateTaskMutation>(print(UpdateTaskDocument), variables, requestHeaders));
    },
    Task(variables: TaskQueryVariables, requestHeaders?: Headers): Promise<TaskQuery> {
      return withWrapper(() => client.request<TaskQuery>(print(TaskDocument), variables, requestHeaders));
    },
    Tasks(variables?: TasksQueryVariables, requestHeaders?: Headers): Promise<TasksQuery> {
      return withWrapper(() => client.request<TasksQuery>(print(TasksDocument), variables, requestHeaders));
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;